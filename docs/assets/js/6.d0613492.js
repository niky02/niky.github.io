(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{125:function(e,t,a){"use strict";a.r(t);var n=a(0),s=Object(n.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"基础知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础知识","aria-hidden":"true"}},[e._v("#")]),e._v(" 基础知识")]),e._v(" "),a("h2",{attrs:{id:"nexttick-watch-computed间的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nexttick-watch-computed间的区别","aria-hidden":"true"}},[e._v("#")]),e._v(" $nextTick $watch computed间的区别")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("$nextTick，是异步监听，从而可刷新监听DOM变化")])]),e._v(" "),a("li",[e._v("**computed只有在它的相关依赖发生改变时才会重新求值,")])]),e._v(" "),a("div",{staticClass:"language-angular2//computed的另一种写法 extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("computed:{\n                 checkAll:{\n                     get(){\n                        return this.checks.every(check=>check.value)\n                     },\n                     set(value){ // 双向绑定数据\n                        this.checks.forEach(check =>check.value = value);\n                     }\n                 }\n             }\n")])])]),a("p",[e._v("在data里没有定义也能使用，computed是有缓存的在所依赖的数据没有发生变化是不会执行\n总之：数据量大，需要缓存的时候用computed；每次确实需要重新加载，不需要缓存时用methods**")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("$watch没有缓存，能支持异步监听变化")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    watch: { //伪代码 这是深层监听\n                getFoddsData: {\n                    handler: function (val, oldVal) {\n                        if(val==='order'){\n                           this.groupshow=false\n                           this.$nextTick(()=>{//是通过变化后异步监听操作\n                              this.ordershow=true\n                           })\n                        }\n                    },\n                    deep: true\n                }\n            },\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("watch:{\n            'searchForm.formData.dateType'(val){//这里没有用深层监听\n                if(val==='order'){\n                        this.groupshow=false\n                        this.$nextTick(()=>{\n                            this.ordershow=true\n                        })\n                }else{\n                    this.ordershow=false\n                    this.$nextTick(()=>{\n                        this.groupshow=true\n                    })\n                }\n            },\n")])])]),a("div",{staticClass:"language-angular2 extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("computed:{//这里可直接监听数据是否有变化，而在data中不需要定义conCode\n            conCode(){\n                return this.$route.query.conCode\n            }\n        },\n")])])]),a("h2",{attrs:{id:"v-if-v-show"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v-if-v-show","aria-hidden":"true"}},[e._v("#")]),e._v(" v-if v-show")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("v-if如果不成里 dom就会消失")])]),e._v(" "),a("li",[a("strong",[e._v("v-show如果不成里 dom不会消失，操作的是样式，v-show不支持template")])])]),e._v(" "),a("div",{staticClass:"language-angular2//是不起作用 extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<template v-show="flag">\n            <div>hello</div>\n            <div >123</div>\n        </template>\n')])])]),a("ul",[a("li",[a("strong",[e._v("v-html")])])]),e._v(" "),a("div",{staticClass:"language-angular2//慎用 extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<div v-html="message">{{message}}</div>\nexport default {\n  data () {\n    return {\n      message: "这里可以包含html标签"\n    }\n  }\n}\n')])])]),a("h2",{attrs:{id:"生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生命周期","aria-hidden":"true"}},[e._v("#")]),e._v(" 生命周期")]),e._v(" "),a("div",{staticClass:"language-angular2//生命周期介绍 extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("            beforeCreate(){ // 钩子函数  beforeXXX   xxxxed\n                console.log(this,this.$data); // 初始化自己的生命周期 并且 绑定自己的事件\n            },\n            created(){ // 如果想调用ajax \n                console.log(this.$data); // 可以获取数据和调用方法\n            },\n            beforeMount(){ // 第一次调用渲染函数之前\n                console.log('渲染前')\n            },\n            template:'',\n            mounted(){ // 获取真实dom  因为页面已经渲染完了\n                console.log('渲染后',this.$el.innerHTML);\n                this.a = 100;\n                this.timer = setInterval(()=>{\n\n                })\n            },\n            beforeUpdate(){\n                this.b = 200;\n                console.log('更新前')\n            },\n            updated(){ // 一般不要操作数据 可能会导致死循环\n                console.log('更新后');\n            },\n            beforeDestroy(){\n                // 当前实例还可以用\n                clearInterval(this.timer);\n                console.log('销毁前')\n            },\n            destroyed(){\n                // 实例上的方法 监听都被移除掉\n                console.log('销毁后')\n            }\n")])])])])},[],!1,null,null,null);t.default=s.exports}}]);